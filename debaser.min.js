/*! angular-debaser - v0.0.0 - 2014-06-16
* https://github.com/decipherinc/angular-debaser
* Copyright (c) 2014 Decipher, Inc.; Licensed MIT */

!function(a,b){"use strict";var c,d=b.injector,e=b.isArray,f=b.extend;c=function(c,g,h){var i,j,k,l;if(!c)throw new Error("debase requires a module name parameter");if(!g||e(g)&&!g.length)throw new Error("debase requires one or more target components");b.isString(g)&&(g=[g]),h=h||{},l=function(a,l,m,n,o){var p=m.getAdapter(h.adapter||n.adapter),q=m.contains;j=b.isDefined(h.autoStub)?h.autoStub:n.autoStub,k=f({},n.stubs,h.stubs),i=f({},n.ignores,m.makeSet(h.ignores||[])),b.module(c)._invokeQueue.forEach(function(a){var b,c=(a[1],a[2]),f=c[0];q(g,f)&&(b=e(c[1])?c[1].slice(0,-1):d().annotate(c[1]),b.forEach(function(a){var b;j&&!k[a]&&(k[a]=new o({$name:a,$type:"function"})),b=o.findStub(a,{stubs:k,adapter:p,ignores:i}),b&&b.provide()}))})},l.$inject=["$provide","$injector","decipher.debaser.utils","decipher.debaser.options","decipher.debaser.stubProvider"],a.beforeEach(function(){b.mock.module(c,l),b.mock.inject()})},c.options=function(a){var c=b.injector(["decipher.debaser"]).get("decipher.debaser.options");b.extend(c,a)},c.stub=function(a){var c,d=arguments,e=function(a){return function(){return a}},f=function(f,g,h,i,j){var k,l,m=g.STUB_TYPES;if(!a)throw new Error("Parameter required");if(b.isString(a)){if(a=a.toLowerCase(),!h.contains(m,a))throw new Error('Unknown stub type "'+a+'".  Valid types are: '+m.join(", ")+". To use a custom value, do not use this function.");k=h.getAdapter(f.adapter,j),l=k[a].apply(null,Array.prototype.slice.call(d,1)),c=new i(b.extend({},l,{$type:a,$proxy:l})),b.isObject(l)||b.isArray(l)?b.forEach(c.$proxy,function(a){b.isFunction(a)&&(a.base=e(c))}):b.isFunction(l)&&(l.base=e(c))}else c=new i(b.extend({},a,{$proxy:a}))};return f.$inject=["decipher.debaser.options","decipher.debaser.constants","decipher.debaser.utils","decipher.debaser.stubProvider","$injector"],b.injector(["decipher.debaser",f]),c},a.debase=c}(window,window.angular),function(a){"use strict";var b=["function","object","array","regexp","date"],c=["factory","service","provider"];a.module("decipher.debaser",["ngMock"]).constant("decipher.debaser.constants",{STUB_TYPES:b,COMPONENTS:c}).constant("decipher.debaser.options",{adapter:"decipher.debaser.adapters.sinon",ignores:{},stubs:{},autoStub:!1,autoScope:!0})}(window.angular,window.beforeEach,window.sinon),function(a,b,c){"use strict";b.module("decipher.debaser").provider("decipher.debaser.adapters.sinon",function(){var d,e=function(){var e,f=arguments;return e=1===arguments.length&&b.isObject(arguments[0])?c.stub(b.copy(arguments[0])):c.stub(),a.beforeEach(function(a){return function(){for(var g=d||c.sandbox.create("decipher.debaser.adapters.sinon"),h=f.length;h--&&h>0;)b.isFunction(f[h].restore)&&f[h].restore();e=g.stub.apply(g,f),b.extend(e,a)}}(e)),e},f=function(a){return function(){var b,c,d=function(){};return d.prototype=a.prototype,b=new d,c=a.apply(b,arguments),Object(c)===c?c:b}},g=function(){return a.beforeEach(function(){d=c.sandbox.create("decipher.debaser.adapters.sinon")}),a.afterEach(function(){d&&d.restore()}),{object:function(a){return a?e(a):{}},"function":function(a){return arguments.length>1?e.apply(null,arguments):c.spy(a)},array:function(a){return a?a.map(function(c,d){return b.isFunction(c)?e.apply(null,[a,d]):c}):[]},regexp:function(){var a=f(RegExp)(arguments);return e(null,a),a},date:function(){var a=f(Date)(arguments);return e(null,a),a}}};return g.$get=function(){throw new Error("not implemented")},g})}(window,window.angular,window.sinon),function(a){"use strict";a.module("decipher.debaser").provider("decipher.debaser.stub",["$provide","decipher.debaser.constants",function(b,c){var d=function(b,c){a.extend(this,b),this.$opts=c||{}};return d.prototype.provide=function(){var a=this.$opts.provider?"constant":"value";b[a](this.$name,this.$proxy)},d.findStub=function e(b,f){var g,h,i,j,k=function(a){if(h[a])return new d({$type:a,$name:b,$proxy:h[j]()});throw new Error('Unknown stub type "'+a+'".  Valid types are: '+c.STUB_TYPES.join(", "))};if(f=f||{},g=f.stubs,h=f.adapter,i=f.ignores||[],!b)throw new Error("name is required");if(!Object.keys(g).length)throw new Error("define stubs!");if(!h)throw new Error("where the hell is the adapter?");return a.isDefined(e.cache[b])?e.cache[b]:i[b]?e.cache[b]=null:(j=g[b],j?(a.isString(j)?j=k(j.toLowerCase()):j.constructor===d?j.$type&&(j.$proxy=j.$proxy||h[j.$type](j.$opts)):j=a.isFunction(j)&&j.name&&h[j.name.toLowerCase()]?k(j.name.toLowerCase()):new d({$name:b,$proxy:j}),e.cache[b]=j):void 0)},d.findStub.cache={},d.$get=function(){return d},d}])}(window.angular),function(a){"use strict";var b,c,d;b=function(a,b){return a.indexOf(b)>-1},c=function(b){var c={};return b.forEach(function(b){a.isString(b)&&(c[b]=!0)}),c},d=function e(b,c){var d;if(e.cache[b])return e.cache[b];if(!a.isString(b))return e.cache[b]=b;try{return d=c||a.injector(["decipher.debaser"]),e.cache[b]=d.get(b+"Provider")()}catch(f){throw window.console.error(f.message),window.console.error(f.stack),window.console.error(f),new Error('debaser: unknown adapter "'+b+'"')}},d.cache={},a.module("decipher.debaser").constant("decipher.debaser.utils",{getAdapter:d,makeSet:c,contains:b})}(window.angular),function(a){"use strict";a.module("decipher.debaser").config(["$injector","decipher.debaser.options","$provide",function(a,b,c){b.autoScope&&c.decorator("$controller",function(a,b){var c=b.get("$rootScope");return function(b,d){var e;return d=d||{},d.$scope=d.$scope||c.$new(),e=a(b,d),e.scope=function(){return d.$scope},e}})}])}(window.angular),function(a,b){"use strict";b(a.mock.module("decipher.debaser"))}(window.angular,window.beforeEach);
//# sourceMappingURL=debaser.min.js.map