/*! angular-debaser - v0.1.0 - 2014-07-06
 * https://github.com/decipherinc/angular-debaser
 * Copyright (c) 2014 Decipher, Inc.; Licensed MIT */

!function (a, b) {
  "use strict";
  var c = {debugEnabled: !1}, d = function (d) {
    var e = function (e) {
      e.constant("decipher.debaser.options",
        b.extend({}, c, d)), e.constant("decipher.debaser.runConfig",
        a.debaser.$$config)
    };
    return e.$inject = ["$provide"], e
  }, e = function (c, e) {
    var f, g, h, i = a.debaser.$$debasers;
    return b.isObject(c) && (e = c, c = null), !c && i.__default__ ?
                                               i.__default__ : (e = e || {}, h =
      b.injector(["ng", d(e), "decipher.debaser"]), f =
      h.get("decipher.debaser.debaser"), c ? (i[c] || (i[c] = new f(c)), i[c]) :
                                         (i.__default__ = g = new f, a.debase =
                                           g.debase.bind(g), g))
  };
  e.$$debasers = {}, e.$$config = {}, a.debaser =
    e, b.module("decipher.debaser", []).constant("decipher.debaser.runConfig",
    a.debaser.$$config).config(["decipher.debaser.options", "$logProvider",
    "$provide", function (a, c, d) {
      b.isFunction(c.debugEnabled) &&
      c.debugEnabled(a.debugEnabled), d.decorator("$log",
        ["$delegate", function (a) {
          return a.debug || b.noop
        }])
    }])
}(window, window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.action", function () {
    var a = function (a) {
      this.action = a
    };
    return a.prototype.deserialize = function () {
      return function () {
        this.callback(this.object[this.func].apply(this.context, this.args))
      }.bind(this.action)
    }, function (b) {
      return b.actions.map(function (b) {
        return new a(b)
      })
    }
  })
}(window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.aspect",
    ["decipher.debaser.superpowers", "decipher.debaser.behavior",
      function (b, c) {
        var d = function e(a, b) {
          this.name = a, this.parent = b, this._id = e._id++
        };
        return d._id = 0, d._DEFAULT_NAME =
          "base", Object.defineProperties(d.prototype,
          {name: {get: function () {
            return this._name
          }, set: function (a) {
            this._dirty = this._isDirty(a, "_name"), this._name =
              a || d._DEFAULT_NAME
          }}, parent: {get: function () {
            return this._parent
          }, set: function (a) {
            this._dirty = this._isDirty(a, "_parent"), this._parent = a
          }}, proto: {get: function () {
            var a = this._dirty;
            return(!this._proto || a) && this._initProto(), this._dirty =
              !1, this._proto
          }, set: function (a) {
            this._proto = a
          }}, behavior: {get: function () {
            var a = this._dirty;
            return(!this._behavior || a) && this._initBehavior(), this._dirty =
              !1, this._behavior
          }, set: function (a) {
            this._behavior = a
          }}, config: {get: function () {
            return this.behavior.config
          }, set: function (a) {
            this.behavior.config = a
          }}}), d.prototype._initProto = function () {
          var c;
          (!this._proto || this._dirty) &&
          (c = {}, this.parent && a.extend(c, this.parent.proto), a.forEach(b,
            function (a, b) {
              "$" !== b.charAt(0) && -1 !== a.$aspect.indexOf(this._name) &&
              (c[b] = this.createProxy(a, b))
            }, this), this._proto = c)
        }, d.prototype._initBehavior = function () {
          (!this._behavior || this._dirty) && (this._behavior =
            new c(a.extend(this._behavior || {},
                this.parent && this.parent.isAspectOf(this.name) &&
                this.parent.behavior), this.name))
        }, d.prototype.flush = function () {
          return this.behavior.flush()
        }, d.prototype._isDirty = function (a, b) {
          return a && a !== this[b] || !a && this[b]
        }, d.prototype.createProxy = function (b, c) {
          var d;
          return d = function () {
            var d, e, f = this.$$aspect, g = f.isAspectOf(c), h = this;
            return g || "base" === f.name || this.$enqueue(), d =
              this.$aspect(b.$name || c), e =
              b.apply(d.config, arguments), a.isArray(e) ?
                                            d.behavior.enqueue(e) :
                                            e && (h = e), h
          }
        }, d.prototype.createProxy.cache = {}, d.prototype.isAspectOf =
          function (a) {
            return"base" !== a && b[a] && -1 !== b[a].$aspect.indexOf(this.name)
          }, d
      }])
}(window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.behavior",
    ["decipher.debaser.config", function (b) {
      var c = function d(b, c) {
        a.extend(this, b), this._aspect_name = c, this._id = d._id++
      };
      return c._id = 0, c.prototype.enqueue = function (a) {
        this.queue.push.apply(this.queue, a)
      }, c.prototype.flush = function () {
        return this.queue.map(function (a) {
          return a.deserialize()
        })
      }, Object.defineProperties(c.prototype, {queue: {get: function () {
        return this._queue || (this._queue = []), this._queue
      }, set: function (a) {
        this._queue = a || []
      }}, config: {get: function () {
        return this._config ||
          (this._config = new b(this._aspect_name)), this._config
      }, set: function (a) {
        this._config = a || new b(this._aspect_name)
      }}}), c
    }])
}(window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.config", function () {
    var b = function c(b, d) {
      a.isString(b) ? d = b : a.extend(this, b), this._aspect_name =
        d, this._callbacks = [], this._cb_idx = 0, this._id =
        c._id++, this.actions = this.actions || []
    };
    return b._id = 0, b.prototype.addAction = function (b) {
      if (!b) {
        throw new Error("$debaser: addCall() expects call options");
      }
      b.callback = b.callback || this.runner(), b.context =
        a.isDefined(b.context) ? b.context :
        b.object || null, this.actions.push(b)
    }, b.prototype.next = function () {
      this._callbacks[this._cb_idx] ?
      this._callbacks[this._cb_idx++].apply(this, arguments) : this.done()
    }, b.prototype.done = function () {
      this._cb_idx = 0
    }, b.prototype.chain = function (a) {
      this._callbacks.push(function () {
        this.next(a.apply(this, arguments))
      }.bind(this))
    }, b.prototype.runner = function () {
      return function () {
        this.next.apply(this, arguments)
      }.bind(this)
    }, b.prototype.isChained = function () {
      return!!this._callbacks.length
    }, b
  })
}(window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.debaser",
    ["$log", "decipher.debaser.aspect", function (b, c) {
      var d = function e(c) {
        a.isString(c) || (c = e.DEFAULT_NAME), this.$name = c, this.$queue =
          [], this.$aspect("base"), b(c !== e.DEFAULT_NAME ?
                                      '$debaser: created Debaser instance with name "' +
                                        c + '"' :
                                      "$debaser: created singleton Debaser instance")
      };
      return d.DEFAULT_NAME = "__default__", d.prototype.$config = function () {
        return this.$$aspect.config
      }, d.prototype.$aspect = function (b) {
        var d, e, f = this.$$aspect;
        return b ? (f && (e = f.proto, Object.keys(e).forEach(function (a) {
          delete this[a]
        }, this)), d = new c(b, f), a.extend(this, d.proto), this.$$aspect =
          d, d) : f
      }, d.prototype.$enqueue = function () {
        var a = this.$$aspect;
        a && this.$queue.push.apply(this.$queue, a.flush())
      }, d.prototype.debase = function () {
        this.$enqueue(), this.$queue.forEach(function (a) {
          a()
        }), this.$queue = [], this.$aspect("base")
      }, d
    }])
}(window.angular), function (a) {
  "use strict";
  a.module("decipher.debaser").factory("decipher.debaser.superpowers",
    ["decipher.debaser.action", "$window", "decipher.debaser.runConfig", "$log",
      function (b, c, d, e) {
        var f, g, h, i, j, k, l, m = c.sinon, n = ["create", "resetBehavior",
          "isPresent"], o = function (a) {
          return"stub" === a.displayName || "spy" === a.displayName
        }, p = function (a) {
          return this.name && this.stub ? a.constant(this.name, this.stub) :
                 void 0
        };
        f = function (c, d) {
          if (!c) {
            return e("$debaser: ignoring empty call to module()");
          }
          if (!a.isString(c)) {
            throw new Error("$debaser: module() expects a string");
          }
          if (this.module = c, this.module_dependencies = [], d) {
            if (!a.isArray(d)) {
              throw new Error("$debaser: module() expects array or undefined as second parameter");
            }
            q.withDeps.call(this, d)
          }
          return this.addAction({object: a, func: "module", args: [this.module,
            this.module_dependencies]}), this.addAction({object: a.mock, func: "module", args: [this.module]}), b(this)
        }, f.$aspect = ["base"], g = function () {
          return arguments.length ?
                 (Array.prototype.slice.call(arguments).forEach(function (b) {
                   if (!a.isString(b)) {
                     throw new Error("$debaser: withDep() expects one or more strings")
                   }
                 }), void this.module_dependencies.push.apply(this.module_dependencies,
                   arguments)) : e("$debaser: ignoring empty call to withDep()")
        }, g.$aspect = ["module"], h = function (b) {
          if (!b) {
            return e("$debaser: ignoring empty call to withDeps()");
          }
          if (!a.isArray(b)) {
            throw new Error("$debaser: withDeps() expects an array");
          }
          g.apply(this, b)
        }, h.$aspect = ["module"], i = function (b) {
          var c = Array.prototype.slice.call(arguments, 1);
          if (!b) {
            return e("$debaser: ignoring empty call to func()");
          }
          if (!a.isString(b)) {
            throw new Error("$debaser: func() expects a name");
          }
          return j.call(this, b,
              m && m.stub ? m.stub.apply(m, c) : function () {
            })
        }, i.$aspect = ["base"], j = function (c, f) {
          if (!c) {
            return e("$debaser: ignoring empty call to object()");
          }
          if (!a.isString(c)) {
            throw new Error("$debaser: object() expects a name");
          }
          if (f && !a.isFunction(f) && !a.isObject(f)) {
            throw new Error("$debaser: object() second param should be an Object or undefined");
          }
          return this.stub ||
            (a.isObject(f) || a.isFunction(f) || (f = {}), this.stub =
                m && m.stub && !o(f) ? m.stub(f) : f), this.isChained() ?
                                                       void 0 : (this.name =
            c, this.component = "value", this.provider = function g(a, b) {
            var c = b[g._id];
            a[c.component](c.name, c.stub)
          }, this.provider.toString = function () {
            return this._id.toString()
          }.bind(this), this.provider._id = this._id, this.provider.$inject =
            ["$provide",
              "decipher.debaser.runConfig"], this.addAction({object: a.mock, func: "module", args: [this.provider]}), d[this._id] =
            this, b(this))
        }, j.$aspect = ["base"], k = function (a) {
          this.name = a, this.chain(p.bind(this)), i.apply(this, arguments)
        }, k.$aspect = ["module"], l = function (a) {
          this.name = a, this.chain(p.bind(this)), j.apply(this, arguments)
        }, l.$aspect = ["module"];
        var q = {module: f, withDep: g, withDeps: h, withFunc: k, withObject: l, func: i, object: j, $SINON_EXCLUDE: n};
        return a.forEach(q, function (a, b) {
          a.$name || (a.$name = b)
        }), m && a.forEach(m.stub, function (b, c) {
          if (a.isFunction(b) && -1 === n.indexOf(c)) {
            var d = function () {
              var a = b.apply(this.stub, arguments);
              return a && a.stub && a.stub.func ? (a.end = function () {
                return this
              }.bind(this), a) : void 0
            };
            d.$aspect = ["func", "withFunc"], d.$name = "func", q[c] = d
          }
        }), q
      }])
}(window.angular);
//# sourceMappingURL=debaser.min.js.map
